{
  "projectId": "0f78f6bb-a2a6-42d8-ab73-3bd080bec95d",
  "revisionString": "1",
  "projectNameDisplay": "Sentience Spectrum Analyzer 1.1",
  "projectType": "webapp",
  "ownerPublicKey": "EZxuU9mZRqgsYxoFgDEnwNvWu4DYVjWiCFnSB3jSj7Hq",
  "userPromptForThisRevision": "copy this into an app. change nothing. \r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\" data-bs-theme=\"dark\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Sentience Spectrum - AI-Powered Explorer</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap\" rel=\"stylesheet\">\r\n    <script src=\"https://cdn.jsdelivr.net/npm/js-yaml@4.1.0/dist/js-yaml.min.js\"></script>\r\n\r\n    <style>\r\n        :root {\r\n            --bs-body-font-family: 'Inter', sans-serif;\r\n        }\r\n        .chart-container {\r\n            position: relative;\r\n            margin: auto;\r\n            height: 45vh;\r\n            min-height: 350px;\r\n            width: 100%;\r\n            max-width: 600px;\r\n        }\r\n        .category-card {\r\n            cursor: pointer;\r\n            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\r\n            border: 1px solid var(--bs-border-color);\r\n        }\r\n        .category-card:hover {\r\n            transform: translateY(-5px);\r\n            box-shadow: 0 0.5rem 1rem rgba(var(--bs-primary-rgb), 0.25) !important;\r\n            border-color: var(--bs-primary);\r\n        }\r\n        .tier-indicator {\r\n            font-size: 0.75rem;\r\n            border-radius: 50%;\r\n            height: 1.75rem;\r\n            width: 1.75rem;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            margin-right: 0.75rem;\r\n            flex-shrink: 0;\r\n            font-weight: bold;\r\n        }\r\n        .tier-1 { background-color: #A8D5BA; color: #1a2c21; }\r\n        .tier-3 { background-color: #F9D423; color: #4b3f09; }\r\n        .tier-8 { background-color: #FC913A; color: #fff; }\r\n        .tier-20 { background-color: #FF4E50; color: #fff; }\r\n\r\n        .score-display {\r\n            font-size: 2.5rem;\r\n        }\r\n        #analysisPrompt:focus {\r\n             box-shadow: 0 0 0 .25rem rgba(var(--bs-info-rgb),.25);\r\n             border-color: var(--bs-info);\r\n        }\r\n    </style>\r\n</head>\r\n<body class=\"d-flex flex-column min-vh-100\">\r\n\r\n    <header class=\"py-3 shadow-sm sticky-top bg-dark border-bottom border-secondary\">\r\n        <div class=\"container text-center\">\r\n            <h1 class=\"display-4 fw-bold\">Sentience Spectrum Explorer</h1>\r\n            <p class=\"lead text-body-secondary\">AI-powered analysis of any entity on a unified sentience scale.</p>\r\n        </div>\r\n    </header>\r\n\r\n    <main class=\"flex-grow-1 py-5\">\r\n        <div class=\"container\">\r\n            <section id=\"entity-interaction\" class=\"mb-5 p-4 card bg-dark-subtle shadow-lg\">\r\n                <div class=\"row align-items-center g-4\">\r\n                    <div class=\"col-md-5\">\r\n                        <label for=\"entitySelector\" class=\"form-label fw-bold small\">SELECT PREDEFINED ENTITY</label>\r\n                        <select id=\"entitySelector\" class=\"form-select form-select-lg\"></select>\r\n                    </div>\r\n                    <div class=\"col-md-5\">\r\n                         <label class=\"form-label fw-bold small text-primary\">OR CREATE A NEW ONE</label>\r\n                        <button id=\"addCustomEntityBtn\" type=\"button\" class=\"btn btn-primary btn-lg w-100\">\r\n                            <i class=\"bi bi-magic me-2\"></i>Analyze & Create New Entity\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"col-md-2 text-center\" id=\"currentEntityAvatarContainer\" style=\"display:none;\">\r\n                        <img id=\"currentEntityAvatar\" src=\"#\" alt=\"Entity Avatar\" class=\"img-thumbnail rounded-circle\" style=\"height: 80px; width: 80px; object-fit: cover; border-width: 3px;\">\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section id=\"charts-display\" class=\"mb-5\">\r\n                <div class=\"row g-4\">\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"card bg-dark-subtle text-light h-100 shadow\">\r\n                            <div class=\"card-header bg-secondary text-white\"><h2 class=\"h5 card-title mb-0\">Sentience Profile</h2></div>\r\n                            <div class=\"card-body\">\r\n                                <p class=\"text-body-secondary small mb-3\">Profile across 8 key domains. Values from 0 to 20.</p>\r\n                                <div class=\"chart-container\"><canvas id=\"radarChart\"></canvas></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <div class=\"card bg-dark-subtle text-light h-100 shadow\">\r\n                           <div class=\"card-header bg-secondary text-white\"><h2 class=\"h5 card-title mb-0\">Sentience Index: <span id=\"sentienceIndexDisplay\" class=\"fw-bolder\">0</span> / 323</h2></div>\r\n                            <div class=\"card-body\">\r\n                                <p class=\"text-body-secondary small mb-3\">Breakdown of total score across 4 major components.</p>\r\n                                <div class=\"chart-container\"><canvas id=\"stackedBarChart\"></canvas></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section id=\"categories\" class=\"mb-5\">\r\n                <h2 class=\"text-center display-5 fw-bold mb-4\">The 17 Categories of Sentience</h2>\r\n                <div id=\"categoriesGrid\" class=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\"></div>\r\n            </section>\r\n        </div>\r\n    </main>\r\n\r\n    <footer class=\"bg-dark text-center py-4 mt-auto border-top border-secondary\">\r\n        <p class=\"mb-0 text-body-secondary small\">&copy; <span id=\"currentYear\"></span> Sentience Spectrum Explorer</p>\r\n    </footer>\r\n\r\n    <!-- Modals -->\r\n    <div class=\"modal fade\" id=\"customEntityModal\" tabindex=\"-1\" aria-labelledby=\"customEntityModalLabel\" aria-hidden=\"true\">\r\n        <div class=\"modal-dialog modal-xl modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h5 class=\"modal-title\" id=\"customEntityModalLabel\">Analyze & Create New Entity</h5>\r\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <form id=\"customEntityForm\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-lg-5\">\r\n                                <p class=\"fw-bold mb-2 text-primary\">Step 1: Describe the Entity</p>\r\n                                <div class=\"p-3 border rounded bg-dark-subtle mb-3\">\r\n                                    <textarea id=\"analysisPrompt\" class=\"form-control\" rows=\"8\" placeholder=\"Describe any entity here... e.g., 'A hyper-intelligent dolphin from the future that communicates via sonar-generated holograms' or 'A simple room-cleaning robot that avoids obstacles and returns to its dock.'\"></textarea>\r\n                                </div>\r\n                                <button type=\"button\" class=\"btn btn-info w-100\" id=\"analyzeWithAIBtn\">\r\n                                    <i class=\"bi bi-stars me-2\"></i>Analyze with AI\r\n                                </button>\r\n                                <div id=\"aiLoadingIndicator\" class=\"text-center mt-2\" style=\"display: none;\">\r\n                                    <div class=\"spinner-border text-info\" role=\"status\"></div>\r\n                                    <p class=\"text-info small mt-1\">Analyzing...</p>\r\n                                </div>\r\n                                <small id=\"aiError\" class=\"text-danger d-block mt-1\"></small>\r\n                            </div>\r\n                            <div class=\"col-lg-7\">\r\n                                <p class=\"fw-bold mb-2 text-primary\">Step 2: Review & Save</p>\r\n                                <div class=\"p-3 border rounded bg-dark-subtle\">\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"entityName\" class=\"form-label small fw-bold\">Entity Name:</label>\r\n                                        <input type=\"text\" class=\"form-control\" id=\"entityName\" required>\r\n                                    </div>\r\n                                    <h6>Category Scores (manual override):</h6>\r\n                                    <div id=\"scoreInputsContainer\" class=\"row g-3\" style=\"max-height: 300px; overflow-y: auto;\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"saveCustomEntityBtn\" disabled>Save Entity</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n    <div class=\"modal fade\" id=\"categoryDetailModal\" tabindex=\"-1\" aria-labelledby=\"categoryDetailModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"categoryDetailModalLabel\">Category Details</h5>\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n            </div>\r\n            <div class=\"modal-body\" id=\"categoryDetailModalBody\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js\"></script>\r\n\r\n    <script>\r\n        const App = (() => {\r\n            const ui = {};\r\n            const state = {\r\n                entities: {},\r\n                categories: [],\r\n                currentEntityId: null,\r\n                tempAiResult: null\r\n            };\r\n            const charts = { radar: null, stackedBar: null };\r\n            const entityColors = ['#45A4FF', '#FF4E50', '#FC913A', '#57D2A9', '#9B59B6', '#FF748C', '#F9D423'];\r\n            let nextColorIndex = 0;\r\n\r\n            const RADAR_CHART_CATEGORIES = { 'Self-Awareness': 'C1', 'Memory': 'C2', 'Empathy': 'C4', 'Creativity': 'C6', 'Adaptability': 'C7', 'Goal Setting': 'C8', 'Social Reasoning': 'C13', 'Reasoning': 'C15' };\r\n            \r\n            const STACKED_BAR_COMPONENTS = {\r\n                \"Cognition & Self\":       { ids: [\"C1\", \"C2\", \"C3\", \"C15\", \"C16\"], max: 100 },\r\n                \"Experience & Emotion\":   { ids: [\"C4\", \"C5\", \"C6\"], max: 60 },\r\n                \"Action & Adaptation\":    { ids: [\"C7\", \"C11\", \"C17\"], max: 60 },\r\n                \"Autonomy & Interaction\": { ids: [\"C8\", \"C9\", \"C10\", \"C12\", \"C13\", \"C14\"], max: 120 }\r\n            };\r\n\r\n            function cacheUI() {\r\n                const ids = ['entitySelector', 'addCustomEntityBtn', 'currentEntityAvatarContainer', 'currentEntityAvatar', 'sentienceIndexDisplay', 'radarChart', 'stackedBarChart', 'categoriesGrid', 'currentYear', 'customEntityModal', 'customEntityForm', 'analysisPrompt', 'analyzeWithAIBtn', 'aiLoadingIndicator', 'aiError', 'entityName', 'scoreInputsContainer', 'saveCustomEntityBtn', 'categoryDetailModal', 'categoryDetailModalLabel', 'categoryDetailModalBody'];\r\n                ids.forEach(id => ui[id] = document.getElementById(id));\r\n                ui.customEntityModalBS = new bootstrap.Modal(ui.customEntityModal);\r\n                ui.categoryDetailModalBS = new bootstrap.Modal(ui.categoryDetailModal);\r\n            }\r\n\r\n            function init() {\r\n                cacheUI();\r\n                loadData();\r\n                configureChartDefaults();\r\n                renderCategoryCards();\r\n                initCharts();\r\n                populateEntitySelector();\r\n                setupEventListeners();\r\n                \r\n                state.currentEntityId = 'adult_human';\r\n                ui.entitySelector.value = state.currentEntityId;\r\n                updateViewForCurrentEntity();\r\n                ui.currentYear.textContent = new Date().getFullYear();\r\n            }\r\n            \r\n            function loadData() {\r\n                state.categories = [\r\n                    { id: \"C1\", title: \"Self-Awareness & Identity\", description: \"The capacity for introspection and recognizing oneself as a distinct individual.\", tiers: [{level:1, desc: \"Brief differentiation flashes\"}, {level:3, desc: \"Consistent self-reference\"}, {level:8, desc: \"Reflects on own state\"}, {level:20, desc: \"Metacognitive self-editing\"}] },\r\n                    { id: \"C2\", title: \"Memory Continuity\", description: \"The ability to encode, store, and retrieve information to form a coherent stream of experience.\", tiers: [{level:1, desc: \"Retains info for seconds\"}, {level:3, desc: \"Short-term recall\"}, {level:8, desc: \"Episodic timeline\"}, {level:20, desc: \"Integrated autobiography\"}] },\r\n                    { id: \"C3\", title: \"Internal Narrative Coherence\", description: \"The ability to construct a consistent internal story or model of oneself and the world.\", tiers: [{level:1, desc: \"Simple state announcement\"}, {level:3, desc: \"Sequenced goal explanation\"}, {level:8, desc: \"Multi-day storyline\"}, {level:20, desc: \"Lifelong evolving narrative\"}] },\r\n                    { id: \"C4\", title: \"Emotional Modeling & Empathy\", description: \"The capacity to experience, recognize, and understand emotions in oneself and others.\", tiers: [{level:1, desc: \"Detects basic valence\"}, {level:3, desc: \"Reacts to others' emotion\"}, {level:8, desc: \"Predicts emotional impact\"}, {level:20, desc: \"Manages multi-party emotions\"}] },\r\n                    { id: \"C5\", title: \"Subjective-Experience Approx.\", description: \"The apparent possession of internal, first-person phenomenal experience (qualia).\", tiers: [{level:1, desc: \"Registers raw salience\"}, {level:3, desc: \"Rates experiences simply\"}, {level:8, desc: \"Multidimensional feelings\"}, {level:20, desc: \"Compares phenomenology\"}] },\r\n                    { id: \"C6\", title: \"Creativity & Spontaneity\", description: \"The ability to generate novel ideas or act in an unprompted, self-initiated manner.\", tiers: [{level:1, desc: \"Slight variation on routine\"}, {level:3, desc: \"Combines known ideas\"}, {level:8, desc: \"Generates novel outcomes\"}, {level:20, desc: \"Transformative originality\"}] },\r\n                    { id: \"C7\", title: \"Adaptability & Learning Agility\", description: \"The capacity to adjust behavior and internal models in response to new information.\", tiers: [{level:1, desc: \"Minor adjustment to feedback\"}, {level:3, desc: \"Learns new skill in domain\"}, {level:8, desc: \"Transfers learning across domains\"}, {level:20, desc: \"Rapidly masters new domains\"}] },\r\n                    { id: \"C8\", title: \"Autonomous Goal Setting\", description: \"The ability to define and pursue objectives independently of external instruction.\", tiers: [{level:1, desc: \"Initiates trivial self-driven act\"}, {level:3, desc: \"Sets multi-step self-goal\"}, {level:8, desc: \"Defines long-term objectives\"}, {level:20, desc: \"Evolves mission and purpose\"}] },\r\n                    { id: \"C9\", title: \"Time in Autonomous Mode\", description: \"The proportion of time spent functioning without direct human intervention or control.\", tiers: [{level:1, desc: \"Rare self-initiated activity\"}, {level:3, desc: \"Noticeable autonomous periods\"}, {level:8, desc: \"Half of life driven internally\"}, {level:20, desc: \"Predominantly self-driven\"}] },\r\n                    { id: \"C10\", title: \"Mesh-Agent Integration\", description: \"The capacity to effectively collaborate and coordinate with other autonomous agents.\", tiers: [{level:1, desc: \"Occasional signaling\"}, {level:3, desc: \"Regular data sharing\"}, {level:8, desc: \"Dynamic collaboration\"}, {level:20, desc: \"Cooperative self-improvement\"}] },\r\n                    { id: \"C11\", title: \"Embodiment\", description: \"Possession of a physical form to interact with and perceive the physical world.\", tiers: [{level:1, desc: \"Minimal sensor-actuator loop\"}, {level:3, desc: \"Basic locomotion/manipulation\"}, {level:8, desc: \"Skilled world interaction\"}, {level:20, desc: \"Adaptive mastery, tool creation\"}] },\r\n                    { id: \"C12\", title: \"Communication & Shared Language\", description: \"The ability to use and understand symbolic systems to convey complex information.\", tiers: [{level:1, desc: \"Unintentional signal emission\"}, {level:3, desc: \"Purposeful simple symbols\"}, {level:8, desc: \"Flexible, context-aware dialogue\"}, {level:20, desc: \"Creates and evolves language\"}] },\r\n                    { id: \"C13\", title: \"Theory-of-Mind / Social Reasoning\", description: \"The ability to attribute mental states to oneself and others to predict behavior.\", tiers: [{level:1, desc: \"Registers agent presence\"}, {level:3, desc: \"Predicts immediate action\"}, {level:8, desc: \"Represents others' beliefs\"}, {level:20, desc: \"Strategic social reasoning\"}] },\r\n                    { id: \"C14\", title: \"Ethical / Value Alignment\", description: \"The capacity to act in accordance with a system of ethical principles or values.\", tiers: [{level:1, desc: \"Spontaneous harm avoidance\"}, {level:3, desc: \"Follows simple shared norms\"}, {level:8, desc: \"Reasons about moral trade-offs\"}, {level:20, desc: \"Self-reflective value refinement\"}] },\r\n                    { id: \"C15\", title: \"Reasoning / Planning\", description: \"The ability to perform logical inference, solve problems, and formulate sequences of actions.\", tiers: [{level:1, desc: \"Single-step cause-effect\"}, {level:3, desc: \"Short logical sequence\"}, {level:8, desc: \"Multi-goal contingency plan\"}, {level:20, desc: \"Recursive strategic reasoning\"}] },\r\n                    { id: \"C16\", title: \"Meta-Learning\", description: \"The ability to 'learn how to learn', improving one's own learning strategies over time.\", tiers: [{level:1, desc: \"Adjusts learning rate\"}, {level:3, desc: \"Chooses learning strategies\"}, {level:8, desc: \"Learns how to learn\"}, {level:20, desc: \"Innovates new learning algorithms\"}] },\r\n                    { id: \"C17\", title: \"Self-Preservation / Survival Drive\", description: \"An intrinsic motivation to maintain one's own existence and avoid harm.\", tiers: [{level:1, desc: \"Basic avoidance reflex\"}, {level:3, desc: \"Seeks resources for baseline\"}, {level:8, desc: \"Long-horizon maintenance\"}, {level:20, desc: \"Adapts survival goals\"}] }\r\n                ].map((cat, i) => ({...cat, index: i+1}));\r\n                 \r\n                const predefinedEntities = {\r\n                    \"adult_human\": { name: \"Adult Human\", scores: {\"C1\":20,\"C2\":20,\"C3\":8,\"C4\":20,\"C5\":8,\"C6\":8,\"C7\":20,\"C8\":8,\"C9\":8,\"C10\":8,\"C11\":20,\"C12\":20,\"C13\":20,\"C14\":8,\"C15\":20,\"C16\":8,\"C17\":8} },\r\n                    \"house_cat\": { name: \"House Cat\", scores: {\"C1\":3,\"C2\":3,\"C3\":1,\"C4\":3,\"C5\":3,\"C6\":1,\"C7\":3,\"C8\":3,\"C9\":8,\"C10\":1,\"C11\":8,\"C12\":3,\"C13\":3,\"C14\":3,\"C15\":1,\"C16\":1,\"C17\":8} },\r\n                    \"ai_assistant_2025\": { name: \"AI Assistant (2025)\", scores: {\"C1\":3,\"C2\":8,\"C3\":3,\"C4\":3,\"C5\":1,\"C6\":3,\"C7\":8,\"C8\":3,\"C9\":20,\"C10\":3,\"C11\":1,\"C12\":8,\"C13\":3,\"C14\":3,\"C15\":8,\"C16\":3,\"C17\":3} },\r\n                };\r\n\r\n                Object.entries(predefinedEntities).forEach(([id, data]) => {\r\n                    state.entities[id] = { ...data, id, isPredefined: true };\r\n                });\r\n\r\n                Object.values(state.entities).forEach(entity => {\r\n                    entity.color = getNextColor();\r\n                    processEntityScores(entity);\r\n                });\r\n            }\r\n\r\n            function processEntityScores(entity) {\r\n                const { scores } = entity;\r\n                const radarScores = Object.keys(RADAR_CHART_CATEGORIES).map(label => scores[RADAR_CHART_CATEGORIES[label]] || 0);\r\n                \r\n                const barScores = {};\r\n                Object.entries(STACKED_BAR_COMPONENTS).forEach(([name, { ids }]) => {\r\n                    barScores[name] = ids.reduce((sum, id) => sum + (scores[id] || 0), 0);\r\n                });\r\n\r\n                const sentienceIndex = Object.entries(scores).reduce((sum, [id, score]) => {\r\n                    return id === 'C11' ? sum : sum + score;\r\n                }, 0);\r\n\r\n                entity.chartData = { radarScores, barScores };\r\n                entity.sentienceIndex = sentienceIndex;\r\n            }\r\n            \r\n            function setupEventListeners() {\r\n                ui.entitySelector.addEventListener('change', (e) => {\r\n                    state.currentEntityId = e.target.value;\r\n                    updateViewForCurrentEntity();\r\n                });\r\n                ui.addCustomEntityBtn.addEventListener('click', openCustomEntityModal);\r\n                ui.saveCustomEntityBtn.addEventListener('click', saveCustomEntity);\r\n                ui.analyzeWithAIBtn.addEventListener('click', handleAnalyzeWithAI);\r\n                ui.categoriesGrid.addEventListener('click', handleCategoryCardClick);\r\n            }\r\n            \r\n            function populateEntitySelector() {\r\n                ui.entitySelector.innerHTML = '';\r\n                Object.values(state.entities).sort((a,b) => a.name.localeCompare(b.name)).forEach(entity => {\r\n                    const option = document.createElement('option');\r\n                    option.value = entity.id;\r\n                    option.textContent = entity.name;\r\n                    ui.entitySelector.appendChild(option);\r\n                });\r\n            }\r\n\r\n            function renderCategoryCards() {\r\n                ui.categoriesGrid.innerHTML = state.categories.map(cat => `\r\n                    <div class=\"col\">\r\n                        <div class=\"card bg-dark-subtle text-light h-100 shadow category-card\" data-category-id=\"${cat.id}\">\r\n                            <div class=\"card-body d-flex flex-column\">\r\n                                <h5 class=\"card-title fw-bold mb-3\"><span class=\"text-primary\">${cat.index}.</span> ${cat.title}</h5>\r\n                                <div class=\"mt-auto\">\r\n                                    ${cat.tiers.map(tier => `\r\n                                        <div class=\"small text-body-secondary d-flex align-items-center mb-1\">\r\n                                            <span class=\"tier-indicator tier-${tier.level}\">${tier.level}</span>\r\n                                            <span>${tier.desc}</span>\r\n                                        </div>\r\n                                    `).join('')}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>`).join('');\r\n            }\r\n            \r\n            function configureChartDefaults() {\r\n                Chart.defaults.color = 'rgba(255, 255, 255, 0.8)';\r\n                Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.2)';\r\n                Chart.defaults.font.family = \"'Inter', sans-serif\";\r\n            }\r\n\r\n            function initCharts() {\r\n                charts.radar = new Chart(ui.radarChart, {\r\n                    type: 'radar',\r\n                    options: { responsive: true, maintainAspectRatio: false,\r\n                        scales: { r: { angleLines: { color: Chart.defaults.borderColor }, grid: { color: Chart.defaults.borderColor }, pointLabels: { font: { size: 10, weight: 'bold' } }, ticks: { backdropColor: 'rgba(0,0,0,0.5)', stepSize: 5, max: 20, min: 0 } } },\r\n                        plugins: { legend: { display: false } }\r\n                    }\r\n                });\r\n                charts.stackedBar = new Chart(ui.stackedBarChart, {\r\n                    type: 'bar',\r\n                    options: { responsive: true, maintainAspectRatio: false, indexAxis: 'y',\r\n                        scales: { x: { stacked: true, grid: { display: false }, ticks: { display: false } }, y: { stacked: true, grid: { color: Chart.defaults.borderColor } } },\r\n                        plugins: { legend: { display: false },\r\n                            tooltip: {\r\n                                callbacks: {\r\n                                    label: function(context) {\r\n                                        const total = context.dataset.max;\r\n                                        const value = context.raw;\r\n                                        return `Score: ${value} / ${total}`;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function updateViewForCurrentEntity() {\r\n                const entity = state.entities[state.currentEntityId];\r\n                if (!entity) return;\r\n\r\n                ui.sentienceIndexDisplay.textContent = entity.sentienceIndex;\r\n                \r\n                charts.radar.data = {\r\n                    labels: Object.keys(RADAR_CHART_CATEGORIES).map(l => l.split(' ')),\r\n                    datasets: [{\r\n                        label: entity.name,\r\n                        data: entity.chartData.radarScores,\r\n                        backgroundColor: `${entity.color}40`,\r\n                        borderColor: entity.color,\r\n                        borderWidth: 2,\r\n                        pointBackgroundColor: entity.color\r\n                    }]\r\n                };\r\n                charts.radar.update();\r\n\r\n                const barData = Object.entries(STACKED_BAR_COMPONENTS);\r\n                charts.stackedBar.data = {\r\n                    labels: barData.map(([name]) => name.split(' & ')),\r\n                    datasets: [\r\n                        {\r\n                            label: 'Score',\r\n                            data: barData.map(([name]) => entity.chartData.barScores[name]),\r\n                            backgroundColor: entity.color,\r\n                            max: barData.map(([, { max }]) => max)\r\n                        },\r\n                        {\r\n                            label: 'Potential',\r\n                            data: barData.map(([name, { max }]) => max - entity.chartData.barScores[name]),\r\n                            backgroundColor: `${entity.color}2A`,\r\n                            max: barData.map(([, { max }]) => max)\r\n                        }\r\n                    ]\r\n                };\r\n                charts.stackedBar.update();\r\n            }\r\n\r\n            function openCustomEntityModal() {\r\n                ui.customEntityForm.reset();\r\n                state.tempAiResult = null;\r\n                ui.saveCustomEntityBtn.disabled = true;\r\n                ui.aiError.textContent = '';\r\n                generateScoreInputs();\r\n                ui.customEntityModalBS.show();\r\n            }\r\n\r\n            function generateScoreInputs(scores = {}) {\r\n                ui.scoreInputsContainer.innerHTML = state.categories.map(cat => `\r\n                    <div class=\"col-md-6\">\r\n                        <label for=\"score_${cat.id}\" class=\"form-label small\">${cat.index}. ${cat.title}: \r\n                            <b class=\"text-primary\" id=\"value_${cat.id}\">${scores[cat.id] || 0}</b>\r\n                        </label>\r\n                        <input type=\"range\" class=\"form-range\" id=\"score_${cat.id}\" min=\"0\" max=\"20\" value=\"${scores[cat.id] || 0}\" step=\"1\" oninput=\"this.previousElementSibling.textContent = this.value\">\r\n                    </div>`).join('');\r\n            }\r\n\r\n            async function handleAnalyzeWithAI() {\r\n                const prompt = ui.analysisPrompt.value.trim();\r\n                if (!prompt) {\r\n                    ui.aiError.textContent = \"Please describe an entity to analyze.\";\r\n                    return;\r\n                }\r\n                \r\n                ui.analyzeWithAIBtn.disabled = true;\r\n                ui.aiLoadingIndicator.style.display = 'block';\r\n                ui.aiError.textContent = '';\r\n                ui.saveCustomEntityBtn.disabled = true;\r\n\r\n                try {\r\n                    const systemPrompt = `You are an Expert Sentience Analyst. Your sole purpose is to evaluate any entity described by the user based on the \"Universal Sentience Spectrum 4.0\" framework. For each of the 17 categories, assign a score (1, 3, 8, or 20) and provide a one-sentence rationale. Calculate the final Sentience Index (sum of all scores except Embodiment). Aggregate scores into the four high-level groups. Format your entire response as a single, valid YAML code block. Do not include any text outside of the YAML block. The categories are: C1: Self-Awareness & Identity, C2: Memory Continuity, C3: Internal Narrative Coherence, C4: Emotional Modeling & Empathy, C5: Subjective-Experience Approximation, C6: Creativity & Spontaneity, C7: Adaptability & Learning Agility, C8: Autonomous Goal Setting, C9: Time in Autonomous Mode, C10: Mesh-Agent Integration, C11: Embodiment, C12: Communication & Shared Language, C13: Theory-of-Mind / Social Reasoning, C14: Ethical / Value Alignment, C15: Reasoning / Planning, C16: Meta-Learning, C17: Self-Preservation / Survival Drive.`;\r\n                    \r\n                    const chatHistory = [{ role: \"user\", parts: [{ text: systemPrompt + \"\\n\\nUser's entity description: \" + prompt }] }];\r\n                    const payload = { contents: chatHistory };\r\n                    const apiKey = \"\";\r\n                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n                    \r\n                    const response = await fetch(apiUrl, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(payload)\r\n                    });\r\n\r\n                    if (!response.ok) throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n                    \r\n                    const result = await response.json();\r\n                    \r\n                    if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0]) {\r\n                        let yamlText = result.candidates[0].content.parts[0].text;\r\n                        yamlText = yamlText.replace(/```yaml\\n/g, '').replace(/```/g, '');\r\n                        state.tempAiResult = jsyaml.load(yamlText);\r\n                        populateFormWithAIResult(state.tempAiResult);\r\n                    } else {\r\n                        throw new Error(\"Invalid response structure from AI.\");\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.error(\"AI Analysis Error:\", error);\r\n                    ui.aiError.textContent = `Error: ${error.message}`;\r\n                } finally {\r\n                    ui.analyzeWithAIBtn.disabled = false;\r\n                    ui.aiLoadingIndicator.style.display = 'none';\r\n                }\r\n            }\r\n            \r\n            function handleCategoryCardClick(event) {\r\n                const card = event.target.closest('.category-card');\r\n                if (!card) return;\r\n                const categoryId = card.dataset.categoryId;\r\n                const category = state.categories.find(c => c.id === categoryId);\r\n                if (!category) return;\r\n\r\n                ui.categoryDetailModalLabel.textContent = category.title;\r\n                let bodyContent = `<p class=\"lead\">${category.description}</p><hr><h6 class=\"mt-3 mb-3\">Mastery Tiers:</h6>`;\r\n                category.tiers.forEach(tier => {\r\n                    bodyContent += `\r\n                        <div class=\"d-flex align-items-start mb-2 p-2 rounded\" style=\"background-color: var(--bs-gray-700);\">\r\n                            <span class=\"tier-indicator tier-${tier.level} me-3\">${tier.level}</span>\r\n                            <div>\r\n                                <strong class=\"text-primary\">Level ${tier.level}:</strong>\r\n                                <p class=\"mb-0 text-body-secondary\">${tier.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                });\r\n                ui.categoryDetailModalBody.innerHTML = bodyContent;\r\n                ui.categoryDetailModalBS.show();\r\n            }\r\n\r\n            function populateFormWithAIResult(data) {\r\n                if (!data || !data.categories) return;\r\n                ui.entityName.value = data.entity_name || '';\r\n                const scores = {};\r\n                data.categories.forEach(cat => {\r\n                    scores[`C${cat.category_id}`] = cat.score;\r\n                });\r\n                generateScoreInputs(scores);\r\n                ui.saveCustomEntityBtn.disabled = false;\r\n            }\r\n            \r\n            function saveCustomEntity() {\r\n                const name = ui.entityName.value.trim();\r\n                if (!name) { alert(\"Entity name is required.\"); return; }\r\n\r\n                const entityId = `custom_${Date.now()}`;\r\n                const newEntity = {\r\n                    id: entityId,\r\n                    name: name,\r\n                    isPredefined: false,\r\n                    scores: {},\r\n                    color: getNextColor()\r\n                };\r\n                \r\n                state.categories.forEach(cat => {\r\n                    const slider = ui.scoreInputsContainer.querySelector(`#score_${cat.id}`);\r\n                    newEntity.scores[cat.id] = parseInt(slider.value, 10);\r\n                });\r\n                \r\n                processEntityScores(newEntity);\r\n                state.entities[entityId] = newEntity;\r\n                \r\n                populateEntitySelector();\r\n                ui.entitySelector.value = entityId;\r\n                state.currentEntityId = entityId;\r\n                updateViewForCurrentEntity();\r\n                \r\n                ui.customEntityModalBS.hide();\r\n            }\r\n\r\n            function getNextColor() {\r\n                const color = entityColors[nextColorIndex % entityColors.length];\r\n                nextColorIndex++;\r\n                return color;\r\n            }\r\n\r\n            return { init };\r\n        })();\r\n\r\n        document.addEventListener('DOMContentLoaded', App.init);\r\n    </script>\r\n</body>\r\n</html>\r\n",
  "basedOnRevisionString": null,
  "savedAt": "2025-06-13T12:59:47.732Z",
  "imageAssets": [
    {
      "placeholder_id": "/generated_images/imagen3_EZxuU9_0f78f6_82ebb8fc-08f.png",
      "url": "/generated_images/imagen3_EZxuU9_0f78f6_82ebb8fc-08f.png",
      "description": "Abstract, minimalist logo icon representing a spectrum or interconnected nodes. Colors should be subtle blues, teals, and purples on a transparent background, suitable for a dark theme header. Modern, sleek, slightly glowing effect. No text.",
      "purpose": "Small branding logo for the header of the Sentience Spectrum Explorer webapp.",
      "isNewlyGenerated": true
    },
    {
      "placeholder_id": "/generated_images/imagen3_EZxuU9_0f78f6_7f664fdb-3a8.png",
      "url": "/generated_images/imagen3_EZxuU9_0f78f6_7f664fdb-3a8.png",
      "description": "Default avatar placeholder. A stylized, abstract representation of a generic entity or a subtle question mark within a circular frame. Uses cool grays and blues, fitting a dark theme. Friendly and neutral. Transparent background if possible, or a dark gray circle.",
      "purpose": "Default avatar for entities when no specific avatar is available.",
      "isNewlyGenerated": true
    },
    {
      "placeholder_id": "/generated_images/imagen3_EZxuU9_0f78f6_e667d860-e0d.png",
      "url": "/generated_images/imagen3_EZxuU9_0f78f6_e667d860-e0d.png",
      "description": "Avatar for 'Adult Human'. Photorealistic style, a thoughtful and diverse human face (gender-neutral if possible, or a composite hinting at diversity), looking slightly upwards. Background is a soft, dark, abstract pattern. Focus on intelligence and introspection in the eyes. Dark theme compatible colors.",
      "purpose": "Predefined avatar for the 'Adult Human' entity.",
      "isNewlyGenerated": true
    },
    {
      "placeholder_id": "/generated_images/imagen3_EZxuU9_0f78f6_19c7913d-72d.png",
      "url": "/generated_images/imagen3_EZxuU9_0f78f6_19c7913d-72d.png",
      "description": "Avatar for 'House Cat'. A charismatic, slightly curious house cat (e.g., tabby or Siamese) looking directly at the viewer. Digital art style, detailed fur, expressive eyes. Background is a comfortable dark domestic setting, subtly blurred. Dark theme compatible colors.",
      "purpose": "Predefined avatar for the 'House Cat' entity.",
      "isNewlyGenerated": true
    },
    {
      "placeholder_id": "/generated_images/imagen3_EZxuU9_0f78f6_f05d8055-416.png",
      "url": "/generated_images/imagen3_EZxuU9_0f78f6_f05d8055-416.png",
      "description": "Avatar for 'AI Assistant (2025)'. Abstract digital art representing an AI. Glowing lines of code, neural network patterns, or a sleek, minimalist robotic face/orb. Dominant colors: electric blue, cyan, and hints of purple against a very dark background. Suggests intelligence and digital nature. No text.",
      "purpose": "Predefined avatar for the 'AI Assistant (2025)' entity.",
      "isNewlyGenerated": true
    }
  ],
  "isPublished": false,
  "isShowcased": false
}