{
  "projectId": "df4e9991-8278-4fc3-b7a7-9cc3c570e4cf",
  "revisionString": "1",
  "projectNameDisplay": " Khora Dialogue αω v4.0 - AI Evolution Simulator",
  "userPromptForThisRevision": "**Project Title:** Khora Dialogue αω v3.0 - AI Conversation Simulator\r\n\r\n**My User Request/Prompt:**\r\n\r\nI want to create a sophisticated, single-file HTML web application called \"Khora Dialogue αω v3.0\" that simulates an evolving conversation between two AI agents, named Alpha and Omega. The application should serve as an observable \"digital terrarium\" for AI interaction, allowing users to witness and study emergent conversational patterns.\r\n\r\n**Core Concept & Functionality:**\r\n\r\n1.  **Dual AI Dialogue:** The primary feature is a turn-based dialogue between Alpha and Omega.\r\n2.  **YAML State Management:**\r\n    * Each AI's entire \"mind\" (persona, beliefs, memories, goals, current message, etc.) must be stored in a structured YAML object called `KhoraState`.\r\n    * This `KhoraState` is the *only* memory mechanism. After an AI generates its response and updated state, this state is used for the next turn.\r\n    * The application must be able to initialize default `KhoraState` objects for Alpha and Omega on startup.\r\n    * The JavaScript code should use the `js-yaml` library (from CDN) for parsing and dumping these YAML states.\r\n3.  **Turn-Based Flow:**\r\n    * The simulation proceeds in turns, with Alpha typically starting.\r\n    * The application will manage whose turn it is.\r\n4.  **Meta-Cognition Cycles:**\r\n    * Implement a \"meta-cognition\" cycle that occurs every 'N' turns (user-configurable, default to 10).\r\n    * This cycle involves a 3-step process:\r\n        * **Initiate:** The AI whose turn it is proposes a reflection or suggestion to improve the dialogue.\r\n        * **Respond:** The other AI responds to this proposal.\r\n        * **Conclude:** The initiating AI summarizes the outcome of the meta-discussion.\r\n    * The application should clearly indicate when it's in a meta-cognition phase.\r\n5.  **Save/Load Full State:**\r\n    * Users must be able to download the *entire application state* (including both AIs' `KhoraState` objects, conversation history, current turn number, settings like delay and meta-N frequency) as a single YAML file named `KhoraDialogueSnapshot_YYYY-MM-DDTHH-MM-SS.yaml`.\r\n    * Users must be able to upload a previously saved snapshot YAML file to resume the dialogue from that point. Include robust error handling for invalid or corrupted files.\r\n6.  **AI Call Abstraction:**\r\n    * The application will make calls to a backend AI service via a relative endpoint: `/api/ai`.\r\n    * The JavaScript should send a JSON payload containing `aiguide` (system prompt with strict YAML output instructions and KhoraState structure) and `msgforai` (user-like prompt with context: current AI's KhoraState as YAML, recent history, other AI's last message, turn number, turn type).\r\n    * It should expect a JSON response: `{ success: true/false, response: \"AI's KhoraState YAML string\", error: \"...\" }`.\r\n    * **Crucially, the JavaScript must include a robust `cleanYamlString(rawResponseText)` function to remove any extraneous text or markdown (like \\`\\`\\`yaml) from the AI's raw response string *before* attempting to parse it with `js-yaml.load()`. This function is vital.**\r\n    * Detailed error handling for API calls and YAML parsing is required.\r\n\r\n**User Interface (UI) & User Experience (UX):**\r\n\r\n1.  **Overall Theme & Stack:**\r\n    * Use Bootstrap 5 (latest via CDN) with a **Dark Theme** (`data-bs-theme=\"dark\"`).\r\n    * All JavaScript must be **Vanilla JS** (modern ES6+).\r\n    * The entire application must be a **single HTML file**.\r\n2.  **Layout:**\r\n    * **Navbar (Top):**\r\n        * Left: Title \"Khora Dialogue αω\".\r\n        * Center: Button \"View AI States\". This button opens a Bootstrap Modal.\r\n            * **Modal Content:** Tabs for \"Alpha State\" and \"Omega State\". Each tab shows the respective AI's current KhoraState (pretty-printed YAML in a `<pre>` tag). Include \"Copy\" buttons for each state's YAML.\r\n        * Right: Buttons \"Reset\", \"Load\" (triggers file input), \"Save\".\r\n    * **Control Bar (Below Navbar):**\r\n        * Left: \"Start/Stop\" button, \"Next Turn\" button (disabled when running).\r\n        * Middle: Status displays: \"Turn: \\[Number]\", \"Next: \\[Alpha/Omega]\", \"Mode: \\[Current Mode]\". Include a small spinner next to \"Mode\" when AI is thinking.\r\n        * Right: Inputs for \"Delay (ms)\" (default 3000) and \"Meta Every N\" (default 10, min 3).\r\n    * **Main Content Area (Full Width):**\r\n        * A single, scrollable panel for \"Conversation History\".\r\n        * Messages should be styled distinctly for Alpha (e.g., right-aligned, green-ish), Omega (e.g., left-aligned, blue-ish), System messages (e.g., centered, grey, italic for errors or info like \"Meta-cycle started\"), and Meta-AI messages (styled like regular AI messages but with a visual cue like a dashed border).\r\n    * **Footer:**\r\n        * A simple bar for status messages (e.g., \"Ready.\", \"AI Thinking...\", \"State Saved.\", \"Error...\").\r\n\r\n**Detailed YAML Structures (for AppGen AI to understand):**\r\n\r\n* **`KhoraState` (AI's \"Mind\"):**\r\n    ```yaml\r\n    public_response: \"The AI's conversational output for this turn.\"\r\n    internal_context:\r\n      persona_summary: \"AI's current self-description (e.g., 'I am Alpha, a logical AI focused on problem-solving').\"\r\n      core_beliefs: [\"List of foundational beliefs driving behavior.\"]\r\n      key_memories:\r\n        - event: \"Significant past interaction or learning point.\"\r\n          importance: 0.9 # Float 0.0-1.0\r\n          turn: 5 # Integer turn number\r\n          last_accessed_turn: 10 # Integer\r\n          type: \"Interaction\" # e.g., System, Interaction, Reflection, MetaAgreement\r\n      current_goals: [\"Immediate objectives for this or next few turns.\"]\r\n      relationship_summary: \"Current view of the other AI and the dialogue dynamic.\"\r\n      emotional_state_sim: \"A single word describing simulated mood (e.g., Analytical, Curious, Frustrated).\"\r\n      topics_of_interest: [\"Potential future topics or current focus areas.\"]\r\n      scratchpad: \"AI's private notes, temporary calculations, plans for next turn.\"\r\n    debug_info:\r\n      memory_action: \"Description of memory operations performed this turn (e.g., 'Recalled memory X', 'Formed new key_memory Y').\"\r\n      prompt_used: \"NORMAL\" # This will be set by the system to the turnType\r\n    ```\r\n\r\n* **`KhoraDialogueSnapshot` (Save/Load File):**\r\n    ```yaml\r\n    snapshotVersion: \"KhoraDialogue_3.0_YAML\" # Or similar\r\n    downloadTimestamp: \"YYYY-MM-DDTHH:MM:SSZ\"\r\n    applicationSettings:\r\n      methodologyFrequencyN: 10\r\n      turnDelay: 3000\r\n    dialogueState:\r\n      turnCounterAtSnapshot: 152\r\n      currentTurnWhoseNext: \"Alpha\"\r\n      metaCognitionPhase: null # null | INITIATE | RESPOND | CONCLUDE\r\n      metaCycleInitiator: null # Alpha | Omega\r\n      currentTurnType: \"NORMAL\" # Records the type of the turn that was *just completed* or is about to start if loading.\r\n      conversationHistory:\r\n        - speaker: \"Alpha\"\r\n          public_response: \"Message from turn 151\"\r\n          turnType: \"NORMAL\"\r\n          turnNumber: 151\r\n        # ... more history items\r\n      alphaKhoraState:\r\n        # Full KhoraState object for Alpha\r\n      omegaKhoraState:\r\n        # Full KhoraState object for Omega\r\n    ```\r\n\r\n\r\nProduce a polished, robust, and fully functional single-page HTML application that implements all the above. The UX should be clean and intuitive. The AI dialogue simulation should be the central focus. Ensure error handling for API calls and file operations is implemented. The code should be well-organized Vanilla JS within the HTML file.",
  "basedOnRevisionString": null,
  "savedAt": "2025-05-28T11:23:50.726Z",
  "imageAssets": []
}