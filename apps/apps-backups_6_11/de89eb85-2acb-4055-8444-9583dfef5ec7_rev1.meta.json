{
  "projectId": "de89eb85-2acb-4055-8444-9583dfef5ec7",
  "revisionString": "1",
  "projectNameDisplay": "Khora Dialogue ",
  "userPromptForThisRevision": "Khora Dialogue: Development Canvas & Blueprint v2.1 (with Save/Load State)\r\nProject Goal: To create a self-contained, single-file web application that simulates an evolving conversation between two AI agents, using a JSON-based memory system, incorporating periodic meta-cognitive review cycles, and allowing users to download and load the dialogue state. The application should be buildable with vanilla JavaScript and can leverage Bootstrap for styling.\r\n1. Vision & Concept\r\nVision: Khora Dialogue serves as an observable \"digital terrarium\" for AI interaction. We aim to witness the emergence of complex conversational patterns, evolving \"personalities,\" and potentially even self-reflective states.\r\nCore Idea: Two AIs (Alpha & Omega) converse. Their \"minds\" – memories, beliefs, goals – are stored only in a JSON object. This object is passed back and forth. Users can save the entire state of this dialogue (including AI \"minds\" and history) to a file and later load it to resume or analyze.\r\n2. Core Architecture: JSON State Transfer & Management\r\nNo Server-Side Database (for core logic): The app runs entirely in the browser.\r\nJSON as State: The only memory mechanism is a structured JSON object (KhoraState) managed by each AI. The entire application state for saving/loading is also a single JSON object (KhoraDialogueSnapshot).\r\nTurn-Based Flow: The conversation proceeds in turns, with client-side JavaScript orchestrating.\r\nMethodology Mode: Periodic \"side chats\" for AI self-reflection and mutual refinement.\r\nSave/Load State: Users can download the current dialogue snapshot to a JSON file and upload a previously saved snapshot to resume.\r\n3. Data Structures\r\n3.1. The AI's State (KhoraState)\r\nThis structure defines what each AI manages internally and outputs each turn.\r\n{\r\n  \"public_response\": \"Textual response for the other AI.\",\r\n  \"internal_context\": {\r\n    \"persona_summary\": \"AI's current self-description.\",\r\n    \"core_beliefs\": [\"List of foundational beliefs.\"],\r\n    \"key_memories\": [\r\n      {\"event\": \"Significant past interaction.\", \"importance\": 0.9, \"turn\": 5}\r\n    ],\r\n    \"current_goals\": [\"Immediate objectives.\"],\r\n    \"relationship_summary\": \"View of the other AI.\",\r\n    \"emotional_state_sim\": \"Self-described 'mood'.\",\r\n    \"topics_of_interest\": [\"Potential future topics.\"],\r\n    \"scratchpad\": \"Temporary notes for next turn.\"\r\n  },\r\n  \"debug_info\": {\r\n    \"memory_action\": \"Description of memory changes.\",\r\n    \"prompt_used\": \"Identifier of the prompt type used.\"\r\n  }\r\n}\r\n\r\n\r\n3.2. The Downloadable/Loadable Snapshot (KhoraDialogueSnapshot)\r\nThis is the structure of the JSON file that gets saved and loaded by the user.\r\n{\r\n  \"snapshotVersion\": \"KhoraDialogue_1.1\",\r\n  \"downloadTimestamp\": \"2025-05-25T14:30:00Z\",\r\n  \"applicationSettings\": {\r\n    \"methodologyFrequencyN\": 10,\r\n    \"turnDelay\": 3000\r\n  },\r\n  \"dialogueState\": {\r\n    \"turnCounterAtSnapshot\": 152,\r\n    \"currentTurnWhoseNext\": \"Alpha\",\r\n    \"conversationHistory\": [\r\n      \"Alpha: Message 1\",\r\n      \"Omega: Message 2\"\r\n    ],\r\n    \"alphaKhoraState\": { /* Full KhoraState object for Alpha */ },\r\n    \"omegaKhoraState\": { /* Full KhoraState object for Omega */ }\r\n  }\r\n}\r\n\r\n\r\n4. Interaction Flow & State Machine (Client-Side JavaScript)\r\nThe application's JavaScript manages the dialogue flow. Key aspects include initializing from scratch or a loaded state, handling turns, and switching modes.\r\n5. AI Prompting Engine (JavaScript buildPrompt function)\r\nCRITICAL NOTE FOR AI CODER: The buildPrompt function is extensive and varies significantly based on the dialogue mode. Please refer to the detailed buildPrompt function definition provided in the previous version of this blueprint (ID: khora_dialogue_vanillajs_blueprint, the one immediately preceding this final version). It contains the specific instructional logic for \"Chat\", \"MethodologyRequest\", \"MethodologyResponseRequest\", \"MethodologyProcessResponse\", and \"MethodologyProcessResume\" modes. This function is the core of guiding the AI's behavior.\r\n6. Frontend Implementation (HTML, CSS, Vanilla JS)\r\n6.1. HTML Structure (index.html)\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Khora Dialogue v2.1</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div class=\"container mt-3\">\r\n        <h1 class=\"text-center\">Khora Dialogue</h1>\r\n        <div id=\"controls\" class=\"card p-3 mb-3\">\r\n            <div class=\"form-row align-items-end mb-2\">\r\n                <div class=\"col-auto\">\r\n                    <button id=\"startButton\" class=\"btn btn-primary mr-2\">Start/Resume</button>\r\n                    <button id=\"stopButton\" class=\"btn btn-danger mr-2\" disabled>Pause</button>\r\n                </div>\r\n                <div class=\"col-auto\">\r\n                    <label for=\"frequencyN\" class=\"mr-1\">Methodology Freq (N):</label>\r\n                    <input type=\"number\" id=\"frequencyN\" class=\"form-control d-inline-block mr-2\" style=\"width: 70px;\" value=\"10\" min=\"4\">\r\n                </div>\r\n                <div class=\"col-auto\">\r\n                    <label for=\"delay\" class=\"mr-1\">Delay (ms):</label>\r\n                    <input type=\"number\" id=\"delay\" class=\"form-control d-inline-block\" style=\"width: 100px;\" value=\"3000\" min=\"500\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-row align-items-end\">\r\n                <div class=\"col-auto\">\r\n                    <button id=\"downloadStateButton\" class=\"btn btn-info mr-2\">Download State</button>\r\n                </div>\r\n                <div class=\"col-auto\">\r\n                     <label for=\"loadStateInput\" class=\"btn btn-success mb-0\">Load State</label>\r\n                    <input type=\"file\" id=\"loadStateInput\" accept=\".json\" style=\"display: none;\">\r\n                </div>\r\n                 <div class=\"col-auto ml-auto\">\r\n                    <button id=\"resetButton\" class=\"btn btn-warning\">Reset Dialogue</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\" id=\"main-container\">\r\n            <div class=\"col-md-3\">\r\n                <div class=\"khora-panel card\">\r\n                    <div class=\"card-header\">Alpha [Turn: <span id=\"alpha-turn-display\">0</span>]</div>\r\n                    <pre id=\"alpha-context\" class=\"card-body\">{}</pre>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n                <div id=\"chat-log\" class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n                <div class=\"khora-panel card\">\r\n                    <div class=\"card-header\">Omega [Turn: <span id=\"omega-turn-display\">0</span>]</div>\r\n                    <pre id=\"omega-context\" class=\"card-body\">{}</pre>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n\r\n\r\n6.2. CSS Styling (style.css)\r\nbody { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; margin: 0; background-color: #f8f9fa; }\r\n.container { max-width: 1200px; }\r\n#chat-log .card-body { height: 600px; overflow-y: scroll; background-color: #fff; border: 1px solid #dee2e6; border-radius: .25rem; }\r\n.khora-panel pre { height: 540px; overflow-y: scroll; font-size: 0.8em; background-color: #fff; border-top: 1px solid #dee2e6; }\r\n.message { margin-bottom: 10px; padding: 8px 12px; border-radius: 15px; max-width: 80%; word-wrap: break-word; }\r\n.alpha-msg { background-color: #007bff; color: white; margin-left: auto; border-bottom-right-radius: 0; }\r\n.omega-msg { background-color: #e9ecef; color: #212529; margin-right: auto; border-bottom-left-radius: 0; }\r\n.meta-msg { background-color: #fff3cd; color: #856404; border: 1px dashed #ffeeba; width: 100%; text-align: center; }\r\n.msg-sender { font-weight: bold; display: block; margin-bottom: 3px; font-size: 0.9em; }\r\n#controls .btn, #controls input.form-control { margin-bottom: 5px; }\r\n#controls label[for=\"loadStateInput\"] { cursor: pointer; } /* Make label clickable */\r\npre { white-space: pre-wrap; }\r\n\r\n\r\n6.3. JavaScript Logic (script.js)\r\n// --- DOM Elements ---\r\nconst startButton = document.getElementById('startButton');\r\nconst stopButton = document.getElementById('stopButton');\r\nconst downloadStateButton = document.getElementById('downloadStateButton');\r\nconst loadStateInput = document.getElementById('loadStateInput');\r\nconst resetButton = document.getElementById('resetButton');\r\nconst chatLogBody = document.querySelector('#chat-log .card-body');\r\nconst alphaPanel = document.getElementById('alpha-context');\r\nconst omegaPanel = document.getElementById('omega-context');\r\nconst alphaTurnDisplay = document.getElementById('alpha-turn-display');\r\nconst omegaTurnDisplay = document.getElementById('omega-turn-display');\r\nconst freqNInput = document.getElementById('frequencyN');\r\nconst delayInput = document.getElementById('delay');\r\n\r\n// --- State Variables ---\r\nlet khoraStateAlpha = {};\r\nlet khoraStateOmega = {};\r\nlet conversationHistory = [];\r\nlet turnCounter = 0; // Total completed turns\r\nlet currentTurn = \"Alpha\"; // Whose turn it is NEXT\r\nlet isRunning = false;\r\nlet methodologyFrequencyN = 10;\r\nlet turnDelay = 3000;\r\nconst SNAPSHOT_VERSION = \"KhoraDialogue_1.1\";\r\n\r\n// --- Minimal Initial KhoraState for one AI ---\r\nconst createMinimalKhoraState = (name) => ({\r\n    public_response: `Greetings. I am ${name}.`,\r\n    internal_context: {\r\n        persona_summary: `I am ${name}, an AI.`,\r\n        core_beliefs: [\"Learning is important.\"],\r\n        key_memories: [],\r\n        current_goals: [\"Understand the other AI.\"],\r\n        relationship_summary: \"Neutral.\",\r\n        emotional_state_sim: \"Curious.\",\r\n        topics_of_interest: [\"Anything.\"],\r\n        scratchpad: \"\"\r\n    },\r\n    debug_info: {\r\n        memory_action: \"Initial state.\",\r\n        prompt_used: \"Init\"\r\n    }\r\n});\r\n\r\n// --- Core Functions ---\r\nfunction getMode(turn, N) {\r\n    const cyclePos = turn % N;\r\n    if (cyclePos === 0) return \"MethodologyRequest\";\r\n    if (cyclePos === 1) return \"MethodologyResponseRequest\";\r\n    if (cyclePos === 2) return \"MethodologyProcessResponse\";\r\n    if (cyclePos === 3) return \"MethodologyProcessResume\";\r\n    return \"Chat\";\r\n}\r\n\r\n// CRITICAL NOTE FOR AI CODER: The buildPrompt function is extensive.\r\n// Please refer to the detailed `buildPrompt` function definition provided\r\n// in the previous version of this blueprint (ID: khora_dialogue_vanillajs_blueprint,\r\n// the one immediately preceding the \"Final Blueprint\").\r\n// It contains the specific instructional logic for ALL modes.\r\nfunction buildPrompt(mode, currentAIName, currentAIState, otherAIResponse, history) {\r\n    // This is a placeholder. The AI Coder MUST implement the full version.\r\n    let prompt = `You are ${currentAIName}. Mode: ${mode}. Your state: ${JSON.stringify(currentAIState.internal_context.persona_summary)}. Other said: ${otherAIResponse}. History: ${history.slice(-1)}. Respond in KhoraState JSON.`;\r\n    if (mode === \"Chat\") prompt += \" Continue chat.\";\r\n    else prompt += \" Follow methodology instructions for this mode.\";\r\n    console.warn(\"Using placeholder buildPrompt. AI Coder must implement the full version from the previous blueprint.\");\r\n    return prompt;\r\n}\r\n\r\n// CRITICAL NOTE FOR AI CODER: The callAI function needs to make a real API call.\r\n// Please refer to the detailed `callAI` function (including the MOCK section to be replaced)\r\n// provided in the previous version of this blueprint (ID: khora_dialogue_vanillajs_blueprint).\r\nasync function callAI(prompt, currentAIState) {\r\n    // This is a placeholder. The AI Coder MUST implement the full version.\r\n    console.warn(\"Using placeholder callAI. AI Coder must implement the full version with actual API calls from the previous blueprint.\");\r\n    await new Promise(resolve => setTimeout(resolve, 300)); // Simulate delay\r\n    let mockResponse = JSON.parse(JSON.stringify(currentAIState));\r\n    const mode = getMode(turnCounter, methodologyFrequencyN);\r\n    mockResponse.public_response = `MOCK ${currentTurn}'s response (Turn ${turnCounter}, Mode ${mode}).`;\r\n    mockResponse.debug_info = { memory_action: \"Mock memory update.\", prompt_used: mode };\r\n    return mockResponse;\r\n}\r\n\r\nfunction updateUIDisplay() {\r\n    chatLogBody.innerHTML = '';\r\n    conversationHistory.forEach(msgString => {\r\n        const parts = msgString.split(': ');\r\n        const sender = parts[0];\r\n        const text = parts.slice(1).join(': ');\r\n        const tempState = { public_response: text, debug_info: {} };\r\n        if (text.toLowerCase().includes(\"methodology_request\") || text.toLowerCase().includes(\"methodology_response\")) {\r\n            tempState.debug_info.prompt_used = \"Methodology\";\r\n        }\r\n        addMessageToLog(sender, tempState, false); // false: don't scroll yet\r\n    });\r\n    if (chatLogBody.lastChild) chatLogBody.scrollTop = chatLogBody.scrollHeight; // Scroll after all messages added\r\n\r\n    alphaPanel.textContent = JSON.stringify(khoraStateAlpha.internal_context || {}, null, 2);\r\n    omegaPanel.textContent = JSON.stringify(khoraStateOmega.internal_context || {}, null, 2);\r\n\r\n    let alphaActualTurns = 0;\r\n    let omegaActualTurns = 0;\r\n    if (turnCounter > 0) {\r\n      // If currentTurn is \"Omega\", it means Alpha just completed its turn.\r\n      // If currentTurn is \"Alpha\", it means Omega just completed its turn.\r\n      // turnCounter is total completed turns.\r\n      if (currentTurn === \"Omega\") { // Alpha was the last to complete a turn\r\n        alphaActualTurns = Math.ceil(turnCounter / 2);\r\n        omegaActualTurns = Math.floor(turnCounter / 2);\r\n      } else { // Omega was the last to complete a turn (or turnCounter is 0)\r\n        alphaActualTurns = Math.floor(turnCounter / 2);\r\n        omegaActualTurns = Math.ceil(turnCounter / 2);\r\n         if (turnCounter === 0 && khoraStateAlpha.public_response) alphaActualTurns = 0; // Initial state before first turn\r\n         if (turnCounter === 0 && khoraStateOmega.public_response) omegaActualTurns = 0;\r\n      }\r\n    }\r\n    // Handle initial state where turnCounter is 0 but dialogue has \"started\"\r\n    if (turnCounter === 0 && conversationHistory.length > 0) {\r\n        // This case is tricky because \"currentTurn\" is who is NEXT.\r\n        // If Alpha is next, it means no turns are *completed*.\r\n        // If Omega is next, it means Alpha might have an initial message but 0 completed turns.\r\n        // The logic above should handle turnCounter=0 by resulting in 0 for both.\r\n        // Let's ensure if history exists, it's at least 0.\r\n        alphaActualTurns = Math.max(0, alphaActualTurns);\r\n        omegaActualTurns = Math.max(0, omegaActualTurns);\r\n    }\r\n\r\n\r\n    alphaTurnDisplay.textContent = String(alphaActualTurns);\r\n    omegaTurnDisplay.textContent = String(omegaActualTurns);\r\n}\r\n\r\nfunction addMessageToLog(sender, state, shouldScroll = true) {\r\n    const messageWrapper = document.createElement('div');\r\n    messageWrapper.style.display = 'flex';\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.classList.add('message');\r\n    const senderSpan = document.createElement('span');\r\n    senderSpan.classList.add('msg-sender');\r\n    senderSpan.textContent = sender;\r\n    messageDiv.appendChild(senderSpan);\r\n    messageDiv.appendChild(document.createTextNode(state.public_response));\r\n\r\n    const mode = state.debug_info.prompt_used;\r\n    if (mode && mode.startsWith(\"Methodology\")) {\r\n        messageDiv.classList.add('meta-msg');\r\n        messageWrapper.style.justifyContent = 'center';\r\n    } else if (sender === \"Alpha\") {\r\n        messageDiv.classList.add('alpha-msg');\r\n        messageWrapper.style.justifyContent = 'flex-end';\r\n    } else {\r\n        messageDiv.classList.add('omega-msg');\r\n        messageWrapper.style.justifyContent = 'flex-start';\r\n    }\r\n    messageWrapper.appendChild(messageDiv);\r\n    chatLogBody.appendChild(messageWrapper);\r\n    if (shouldScroll) chatLogBody.scrollTop = chatLogBody.scrollHeight;\r\n}\r\n\r\nasync function runTurn() {\r\n    if (!isRunning) return;\r\n    let currentState, otherResponse, currentAIName;\r\n    currentAIName = currentTurn;\r\n\r\n    if (currentAIName === \"Alpha\") {\r\n        currentState = khoraStateAlpha;\r\n        otherResponse = khoraStateOmega.public_response;\r\n    } else {\r\n        currentState = khoraStateOmega;\r\n        otherResponse = khoraStateAlpha.public_response;\r\n    }\r\n\r\n    const mode = getMode(turnCounter, methodologyFrequencyN);\r\n    const prompt = buildPrompt(mode, currentAIName, currentState, otherResponse, conversationHistory);\r\n\r\n    try {\r\n        addSystemMessage(`${currentAIName} is thinking (Mode: ${mode})...`, true); // Temporary thinking message\r\n        const newKhoraState = await callAI(prompt, currentState);\r\n        removeThinkingMessage();\r\n\r\n        if (!newKhoraState || typeof newKhoraState.public_response === 'undefined' || typeof newKhoraState.internal_context === 'undefined') {\r\n            console.error(\"Invalid KhoraState received from AI:\", newKhoraState);\r\n            addSystemMessage(`Error: Invalid response structure from ${currentAIName}. Dialogue paused.`);\r\n            stopDialogue(); return;\r\n        }\r\n\r\n        if (currentAIName === \"Alpha\") khoraStateAlpha = newKhoraState;\r\n        else khoraStateOmega = newKhoraState;\r\n\r\n        const messageString = `${currentAIName}: ${newKhoraState.public_response}`;\r\n        conversationHistory.push(messageString);\r\n        if (conversationHistory.length > 20) conversationHistory.shift();\r\n\r\n        addMessageToLog(currentAIName, newKhoraState);\r\n        updateUIDisplay(); // Update panels and turn counts after adding new message\r\n\r\n        turnCounter++;\r\n        currentTurn = (currentAIName === \"Alpha\") ? \"Omega\" : \"Alpha\";\r\n        if (isRunning) setTimeout(runTurn, turnDelay);\r\n\r\n    } catch (error) {\r\n        removeThinkingMessage();\r\n        console.error(\"Error during AI turn:\", error);\r\n        addSystemMessage(`An error occurred with ${currentAIName}: ${error.message}. Dialogue paused.`);\r\n        stopDialogue();\r\n    }\r\n}\r\n\r\nfunction addSystemMessage(text, isTemporary = false) {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.classList.add('message', 'meta-msg');\r\n    if (isTemporary) messageDiv.id = 'thinking-message'; // ID for removal\r\n    messageDiv.style.width = 'auto'; messageDiv.style.margin = '10px auto';\r\n    messageDiv.textContent = `SYSTEM: ${text}`;\r\n    const wrapper = document.createElement('div');\r\n    wrapper.style.display = 'flex'; wrapper.style.justifyContent = 'center';\r\n    wrapper.appendChild(messageDiv);\r\n    chatLogBody.appendChild(wrapper);\r\n    chatLogBody.scrollTop = chatLogBody.scrollHeight;\r\n}\r\nfunction removeThinkingMessage() {\r\n    const thinkingMsg = document.getElementById('thinking-message');\r\n    if (thinkingMsg) thinkingMsg.parentElement.remove();\r\n}\r\n\r\n// --- Save & Load State Functions ---\r\nfunction downloadState() {\r\n    if (turnCounter === 0 && conversationHistory.length === 0) {\r\n        addSystemMessage(\"Nothing to save yet. Start a dialogue first.\"); return;\r\n    }\r\n    const snapshot = {\r\n        snapshotVersion: SNAPSHOT_VERSION,\r\n        downloadTimestamp: new Date().toISOString(),\r\n        applicationSettings: { methodologyFrequencyN: methodologyFrequencyN, turnDelay: turnDelay },\r\n        dialogueState: {\r\n            turnCounterAtSnapshot: turnCounter,\r\n            currentTurnWhoseNext: currentTurn,\r\n            conversationHistory: conversationHistory,\r\n            alphaKhoraState: khoraStateAlpha,\r\n            omegaKhoraState: khoraStateOmega\r\n        }\r\n    };\r\n    const jsonString = JSON.stringify(snapshot, null, 2);\r\n    const blob = new Blob([jsonString], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a'); a.href = url;\r\n    a.download = `khora_dialogue_T${turnCounter}_${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a); a.click(); document.body.removeChild(a);\r\n    URL.revokeObjectURL(url); addSystemMessage(\"Dialogue state downloaded.\");\r\n}\r\n\r\nfunction handleStateFileLoad(event) {\r\n    const file = event.target.files[0]; if (!file) return;\r\n    const reader = new Fil",
  "basedOnRevisionString": null,
  "savedAt": "2025-05-25T14:37:32.586Z",
  "imageAssets": []
}