{
  "projectId": "3a79b15d-b83b-40a4-9a05-b31d28354137",
  "revisionString": "1",
  "projectNameDisplay": "APPGEN Gallery",
  "userPromptForThisRevision": "\r\n\r\nUpdated Spec for the AppGen Gallery App (No External API)\r\n\r\n\r\n---\r\n\r\n1. Overview\r\n\r\nThis app will display a gallery of apps stored in your GitHub repo by reading the raw HTML files directly, using the AI built into your AppGen system to extract titles and generate images. It will use the existing AI endpoints (/api/ai and /api/image-gen) stored within AppGen for processing, ensuring everything stays self-contained.\r\n\r\n2. Tech Stack\r\n\r\nHTML5 + Bootstrap 5 (via CDN)\r\n\r\nVanilla JavaScript (ES6+)\r\n\r\nGitHub REST API (to list files in apps/)\r\n\r\nAppGen AI Endpoints\r\n\r\nAI Text: /api/ai\r\n\r\nAI Image Gen: /api/image-gen\r\n\r\n\r\n\r\n3. Functional Requirements\r\n\r\n1. Discover apps\r\n\r\nUse GitHub’s REST API to list all files in apps/ folder:\r\n\r\nfetch('https://api.github.com/repos/metamindsapp/appgen2025-backups/contents/apps?ref=main')\r\n\r\nExtract the filenames (filter for .html).\r\n\r\n\r\n\r\n2. Fetch each app's source\r\n\r\nFetch each app's raw HTML from the GitHub URL:\r\n\r\nfetch(`https://raw.githubusercontent.com/metamindsapp/appgen2025-backups/main/apps/${filename}`)\r\n\r\n\r\n\r\n3. Extract Title (AI)\r\n\r\nUse AppGen's AI text generation to extract the project title from the HTML content:\r\n\r\nfetch('/api/ai', {\r\n  method: 'POST',\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: JSON.stringify({\r\n    prompt: \"Extract the project title from this HTML. Return ONLY the title.\",\r\n    source: \"<HTML content here>\"\r\n  })\r\n})\r\n\r\nExpect a response like:\r\n\r\n{ \"result\": \"My Cool App\" }\r\n\r\n\r\n\r\n4. Generate Image (AI)\r\n\r\nUse AppGen's AI image generation to create an image that represents the project:\r\n\r\nfetch('/api/image-gen', {\r\n  method: 'POST',\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: JSON.stringify({ prompt: \"Generate an illustrative image that represents 'My Cool App.'\" })\r\n})\r\n\r\nExpect a response like:\r\n\r\n{ \"url\": \"https://appgen.example.com/images/my-cool-app.jpg\" }\r\n\r\n\r\n\r\n5. Render Gallery\r\n\r\nDisplay a Bootstrap 5 gallery with 3 apps per row, each app having an image and title:\r\n\r\n<div class=\"col-12 col-md-4\">\r\n  <div class=\"card h-100\">\r\n    <a href=\"{appUrl}\" target=\"_blank\" rel=\"noopener\">\r\n      <img src=\"{imageUrl}\" class=\"card-img-top\" alt=\"{title}\">\r\n    </a>\r\n    <div class=\"card-body text-center\">\r\n      <a href=\"{appUrl}\" target=\"_blank\" rel=\"noopener\" class=\"text-decoration-none\">\r\n        <h5 class=\"card-title\">{title}</h5>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n4. Data Model & State\r\n\r\nconst apps = [\r\n  {\r\n    filename: string,       // \"b3fccf…_rev2.html\"\r\n    sourceUrl: string,      // raw.githubusercontent URL\r\n    appUrl: string,         // `${baseUrl}/apps/${filename}`\r\n    title: string,          // extracted title\r\n    imageUrl: string        // generated image URL\r\n  },\r\n  …\r\n];\r\n\r\n5. Main JS Functions\r\n\r\ninitGallery(): entry point, triggered on DOMContentLoaded.\r\n\r\nfetchAppList(): Fetches app file details from GitHub repo.\r\n\r\nfetchSourceCode(sourceUrl): Fetches raw HTML for each app.\r\n\r\nextractTitle(html): Sends the HTML to the AI endpoint to get the app title.\r\n\r\ngenerateImageFor(title): Sends the app title to the image-gen AI endpoint.\r\n\r\nrenderGallery(apps): Renders the gallery using Bootstrap.\r\n\r\n\r\n6. Workflow Sequence\r\n\r\n1. Init → show spinner.\r\n\r\n\r\n2. fetchAppList → get filenames from GitHub.\r\n\r\n\r\n3. For each file:\r\n\r\nFetch source code.\r\n\r\nCall AI Text → extract title.\r\n\r\nCall AI Image-Gen → generate image.\r\n\r\nPopulate apps array with { filename, sourceUrl, appUrl, title, imageUrl }.\r\n\r\n\r\n\r\n4. Render Gallery → display the gallery once all apps are processed.\r\n\r\n\r\n\r\n7. UI Layout (HTML Skeleton)\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <title>AppGen Gallery</title>\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.x/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n  <div class=\"container py-4\">\r\n    <h1 class=\"mb-4 text-center\">Live App Gallery</h1>\r\n    <div id=\"gallery\" class=\"row g-4\"></div>\r\n    <div id=\"spinner\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border\" role=\"status\"><span class=\"visually-hidden\">Loading…</span></div>\r\n    </div>\r\n  </div>\r\n  <script>\r\n    // Main JS here, follow the sequence outlined above\r\n  </script>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.x/dist/js/bootstrap.bundle.min.js\"></script>\r\n</body>\r\n</html>\r\n\r\n8. Performance & Caching\r\n\r\nlocalStorage: Cache app titles and images with a 24-hour TTL.\r\n\r\nIf the cache is fresh, skip the AI calls and render the gallery directly.\r\n\r\n\r\n9. Error Handling\r\n\r\nIf AI title extraction fails → fallback title = filename (without _revN).\r\n\r\nIf image generation fails → fallback to a placeholder image.\r\n\r\nIf fetching source fails → log the error, skip the app in the gallery.\r\n\r\n\r\n\r\n---\r\n\r\nKey Points:\r\n\r\nNo external APIs required beyond your AI endpoints stored in AppGen.\r\n\r\nAuto-fetches app data directly from your GitHub repo.\r\n\r\nAI-powered title extraction and image generation.\r\n\r\nUses Bootstrap 5 for layout and responsiveness.\r\n\r\nError handling to keep the app robust and user-friendly.",
  "basedOnRevisionString": null,
  "savedAt": "2025-05-21T19:06:36.423Z",
  "imageAssets": []
}